<Opened Files>
<File Name>
automations.yaml
</File Name>
<File Content>
#===============================================================================
# Automations Configuration - ONLY Automations (No Scripts)
# File: automations.yaml
# Updated: 2025-08-22
# Note: All scripts must be in scripts.yaml, not here
#===============================================================================

# Prepaid meter recharge automation
- id: '1717429630744'
  alias: 'Prepaid: Meter Recharge at 09:00'
  description: 'Update prepaid meter reading when units are recharged'
  trigger:
    - platform: time
      at: '09:00:00'
    - platform: state
      entity_id: input_number.prepaid_meter_units
  condition:
    - condition: template
      value_template: '{{ states(''input_number.prepaid_meter_units'') | float > 0 }}'
  action:
    - service: input_number.set_value
      metadata: {}
      data:
        value: '{{ ((states(''sensor.deyeinvertermaster_summary_total_grid_import_buy'') |
          float(6))  * 1000.0) }}'
      target:
        entity_id: input_number.prepaid_meter_inverter_total_units
    - service: notify.telegram
      data:
        title: "⚡ Prepaid Meter Recharged"
        message: >
          Units added: {{ states('input_number.prepaid_meter_units') }} kWh
          New reading: {{ states('input_number.prepaid_meter_inverter_total_units') }}
          Units remaining: {{ states('sensor.prepaid_units_left') }} kWh
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# Solar inverter optimization automation
- id: '1686299812078'
  alias: 'Solar: Switch Export Mode at 09:00 and Sunset/Sunrise'
  description: 'Control export to non-essentials based on solar availability'
  trigger:
    - platform: time
      at: '09:00:00'
      id: morning_check
    - platform: sun
      event: sunset
      offset: -00:45:00
      id: poweressentials
    - platform: sun
      event: sunrise
      offset: 00:45:00
      id: powernonessentials
  condition:
    - condition: state
      entity_id: input_boolean.solar_optimization_enabled
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: poweressentials
          sequence:
            - service: select.select_option
              data:
                option: Essentials
              target:
                entity_id: 
                  - select.deyeinvertermaster_load_limit_exp_ess_non_ess
                  - select.deyeinverterslave_load_limit_exp_ess_non_ess
            - service: notify.telegram
              data:
                title: "🌅 Solar Mode: Essentials Only"
                message: >
                  Switched to Essentials mode at sunset
                  Battery SOC: {{ states('sensor.combined_battery_soc') }}%
                  Solar Power: {{ states('sensor.combined_solar_power') }}W
        - conditions:
            - condition: trigger
              id: powernonessentials
          sequence:
            - service: select.select_option
              data:
                option: Zero Export
              target:
                entity_id:
                  - select.deyeinvertermaster_load_limit_exp_ess_non_ess
                  - select.deyeinverterslave_load_limit_exp_ess_non_ess
            - service: notify.telegram
              data:
                title: "☀️ Solar Mode: Zero Export"
                message: >
                  Switched to Zero Export mode at sunrise
                  Battery SOC: {{ states('sensor.combined_battery_soc') }}%
                  Solar Power: {{ states('sensor.combined_solar_power') }}W
        - conditions:
            - condition: trigger
              id: morning_check
          sequence:
            - service: script.morning_solar_optimization
  mode: single

# Battery monitoring automation
- id: 'battery_monitoring_daily'
  alias: 'Battery: Daily Monitoring Check at 09:00'
  description: 'Daily battery status check and alerts'
  trigger:
    - platform: time
      at: '09:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.battery_alerts_enabled
      state: 'on'
  action:
    - service: script.battery_status_check
    - condition: template
      value_template: >
        {{ states('sensor.battery_status_summary') in ['critical', 'low'] }}
    - service: notify.telegram
      data:
        title: "🔋 Daily Battery Status Alert"
        message: >
          Battery Status: {{ states('sensor.battery_status_summary') | title }}
          
          {% for entity in ['sensor.temperature_humidity_sensor_battery', 'sensor.temperature_humidity_sensor_battery_2', 'sensor.motion_sensor_battery', 'sensor.snzb_05p_battery'] %}
          {% if states(entity) not in ['unknown', 'unavailable'] %}
          • {{ state_attr(entity, 'friendly_name') }}: {{ states(entity) }}%
          {% endif %}
          {% endfor %}
          
          Monitored devices: {{ states('sensor.battery_devices_count') }}
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# System health monitoring automation
- id: 'system_health_daily'
  alias: 'System: Daily Health Check at 09:00'
  description: 'Daily system health monitoring and reporting'
  trigger:
    - platform: time
      at: '09:00:00'
  action:
    - service: script.system_health_check
    - service: notify.telegram
      data:
        title: "🖥️ Daily System Health Report"
        message: >
          **System Health Summary:**
          
          🖥️ CPU Usage: {{ states('sensor.processor_use') }}%
          💾 Memory Usage: {{ states('sensor.memory_use_percent') }}%
          💿 Disk Usage: {{ states('sensor.disk_use_percent_config') }}%
          ⏰ Uptime: {{ relative_time(states('sensor.last_boot')) }}
          
          **Solar System:**
          🔋 Combined Battery: {{ states('sensor.combined_battery_soc') }}%
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          🏠 Grid Import: {{ states('sensor.total_grid_import') }}W
          📤 Grid Export: {{ states('sensor.total_grid_export') }}W
          
          **Entity Status:**
          ✅ Critical Entities: {{ 'OK' if is_state('binary_sensor.all_critical_entities_available', 'on') else 'ISSUES' }}
          🔋 Battery Sensors: {{ states('sensor.battery_entities_status') }}/4
          
          {% if not is_state('binary_sensor.all_critical_entities_available', 'on') %}
          ⚠️ **Action Required:** Some entities are unavailable.
          {% endif %}
  mode: single

# Energy analytics automation
- id: 'energy_analytics_daily'
  alias: 'Energy: Daily Analytics Report at 09:00'
  description: 'Generate daily energy analytics and savings report'
  trigger:
    - platform: time
      at: '09:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.telegram_energy_reports
      state: 'on'
  action:
    - service: notify.telegram
      data:
        title: "📊 Daily Energy Analytics"
        message: >
          **Yesterday's Energy Performance:**
          
          ☀️ Solar Generated: {{ states('sensor.daily_solar_generation_combined') }} kWh
          🏠 Grid Import: {{ states('sensor.daily_grid_import_total') | float(0) | round(2) }} kWh
          📤 Grid Export: {{ states('sensor.daily_grid_export_total') | float(0) | round(2) }} kWh
          🌱 Independence: {{ states('sensor.energy_independence_percentage') }}%
          
          **Current Status:**
          🔋 Battery SOC: {{ states('sensor.combined_battery_soc') }}%
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          💡 Prepaid Left: {{ states('sensor.prepaid_units_left') }} kWh
          📅 Days Left: {{ states('sensor.days_until_prepaid_empty') }}
          
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# Load shedding preparation automation
- id: 'load_shedding_preparation'
  alias: 'Load Shedding: Daily Preparation Check at 09:00'
  description: 'Check battery levels and prepare for potential load shedding'
  trigger:
    - platform: time
      at: '09:00:00'
    - platform: state
      entity_id: input_boolean.load_shedding_mode
      to: 'on'
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: input_boolean.load_shedding_mode
          state: 'on'
        - condition: numeric_state
          entity_id: sensor.combined_battery_soc
          below: 30
  action:
    - service: notify.telegram
      data:
        title: "🔌 Load Shedding Preparation"
        message: >
          **Load Shedding Status Check:**
          
          🔋 Battery Level: {{ states('sensor.combined_battery_soc') }}%
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          🌞 Current Time: {{ now().strftime('%H:%M') }}
          
          {% if states('sensor.combined_battery_soc') | float < 30 %}
          ⚠️ **Battery Low Warning:**
          Battery below 30% - Consider reducing non-essential loads
          {% elif states('sensor.combined_battery_soc') | float >= 80 %}
          ✅ **Battery Well Charged:**
          Ready for potential load shedding periods
          {% else %}
          📊 **Battery Moderate:**
          Monitor levels throughout the day
          {% endif %}
          
          Load Shedding Mode: {{ 'ACTIVE' if is_state('input_boolean.load_shedding_mode', 'on') else 'STANDBY' }}
  mode: single
</File Content>
</Opened Files>
<Opened Files>
<File Name>
packages/notification_enhanced.yaml
</File Name>
<File Content>
#===============================================================================
# Simple Notification Package - Minimal Version
# File: packages/notification_simple.yaml
# Purpose: Basic notification management without complex features
#===============================================================================

input_boolean:
  notification_quiet_mode:
    name: "Quiet Mode Enabled"
    initial: true
    icon: mdi:volume-off

  notification_priority_only:
    name: "Priority Notifications Only"
    initial: false
    icon: mdi:priority-high

input_number:
  notification_quiet_hours_start:
    name: "Quiet Hours Start"
    min: 0
    max: 23
    step: 1
    initial: 22
    unit_of_measurement: "hour"
    icon: mdi:sleep

  notification_quiet_hours_end:
    name: "Quiet Hours End"
    min: 0
    max: 23
    step: 1
    initial: 7
    unit_of_measurement: "hour"
    icon: mdi:sleep-off

template:
  - binary_sensor:
      - name: "Quiet Hours Active"
        state: >
          {% set current_hour = now().hour %}
          {% set start_hour = states('input_number.notification_quiet_hours_start') | int %}
          {% set end_hour = states('input_number.notification_quiet_hours_end') | int %}
          {% if start_hour > end_hour %}
            {{ current_hour >= start_hour or current_hour < end_hour }}
          {% else %}
            {{ start_hour <= current_hour < end_hour }}
          {% endif %}
        icon: mdi:sleep

automation:
  - id: 'notification_morning_summary_simple'
    alias: 'Notifications: Simple Morning Summary at 09:00'
    description: 'Send basic morning summary'
    trigger:
      - platform: time
        at: '09:00:00'
    condition:
      - condition: state
        entity_id: input_boolean.notification_quiet_mode
        state: 'on'
    action:
      - service: persistent_notification.create
        data:
          title: "🌅 Morning Summary"
          message: >
            Good morning! System status:
            Battery SOC: {{ states('sensor.deyeinvertermaster_battery_soc') }}%
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
          notification_id: "morning_summary"
</File Content>
</Opened Files>
<Opened Files>
<File Name>
scripts.yaml
</File Name>
<File Content>
# Morning solar optimization script
morning_solar_optimization:
  alias: "Morning Solar Optimization"
  description: "Optimize solar settings for the day ahead"
  sequence:
    - service: notify.telegram
      data:
        title: "🌅 Morning Solar Optimization"
        message: >
          Starting daily solar optimization at 09:00
          
          Current conditions:
          🔋 Battery SOC: {{ states('sensor.combined_battery_soc') }}%
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: sensor.combined_battery_soc
              above: 80
            - condition: numeric_state
              entity_id: sensor.combined_solar_power
              above: 500
          sequence:
            - service: select.select_option
              data:
                option: "Zero Export"
              target:
                entity_id:
                  - select.deyeinvertermaster_load_limit_exp_ess_non_ess
                  - select.deyeinverterslave_load_limit_exp_ess_non_ess
            - service: notify.telegram
              data:
                message: "✅ Set to Zero Export - Good solar conditions and high battery"
        - conditions:
            - condition: numeric_state
              entity_id: sensor.combined_battery_soc
              below: 50
          sequence:
            - service: select.select_option
              data:
                option: "Essentials"
              target:
                entity_id:
                  - select.deyeinvertermaster_load_limit_exp_ess_non_ess
                  - select.deyeinverterslave_load_limit_exp_ess_non_ess
            - service: notify.telegram
              data:
                message: "⚠️ Set to Essentials - Battery needs charging"
      default:
        - service: notify.telegram
          data:
            message: "📊 Maintaining current settings - Conditions are moderate"

# Battery status check script
battery_status_check:
  alias: "Battery Status Check"
  description: "Check all battery-powered devices and report status"
  sequence:
    - service: counter.increment
      target:
        entity_id: counter.battery_alerts_today
    - variables:
        battery_entities:
          - sensor.temperature_humidity_sensor_battery
          - sensor.temperature_humidity_sensor_battery_2
          - sensor.motion_sensor_battery
          - sensor.snzb_05p_battery
        critical_threshold: "{{ states('input_number.battery_critical_threshold') | int }}"
    - repeat:
        for_each: "{{ battery_entities }}"
        sequence:
          - condition: template
            value_template: "{{ states(repeat.item) not in ['unknown', 'unavailable'] }}"
          - condition: template
            value_template: "{{ states(repeat.item) | int <= critical_threshold }}"
          - service: notify.telegram
            data:
              title: "🔋 Critical Battery Alert"
              message: >
                **CRITICAL:** {{ state_attr(repeat.item, 'friendly_name') }}
                Battery Level: {{ states(repeat.item) }}%
                Threshold: {{ critical_threshold }}%
                
                ⚠️ **IMMEDIATE ACTION REQUIRED**

# System health check script
system_health_check:
  alias: "System Health Check"
  description: "Comprehensive system health monitoring"
  sequence:
    - variables:
        cpu_usage: "{{ states('sensor.processor_use') | float(0) }}"
        memory_usage: "{{ states('sensor.memory_use_percent') | float(0) }}"
        disk_usage: "{{ states('sensor.disk_use_percent_config') | float(0) }}"
    - condition: template
      value_template: >
        {{ cpu_usage > 90 or memory_usage > 90 or disk_usage > 90 }}
    - service: notify.telegram
      data:
        title: "🚨 System Health Warning"
        message: >
          **System resources are high:**
          
          🖥️ CPU: {{ cpu_usage }}%
          💾 Memory: {{ memory_usage }}%
          💿 Disk: {{ disk_usage }}%

# Telegram status report script
telegram_status_report:
  alias: "Send Telegram Status Report"
  description: "Send comprehensive status report on demand"
  sequence:
    - service: notify.telegram
      data:
        title: "📊 Manual Status Report"
        message: >
          **System Status:**
          
          🔋 **Solar System:**
          • Combined Battery: {{ states('sensor.combined_battery_soc') }}%
          • Solar Power: {{ states('sensor.combined_solar_power') }}W
          • Grid Import: {{ states('sensor.total_grid_import') }}W
          • Grid Export: {{ states('sensor.total_grid_export') }}W
          
          💡 **Prepaid Status:**
          • Units Left: {{ states('sensor.prepaid_units_left') }} kWh
          • Days Remaining: {{ states('sensor.days_until_prepaid_empty') }}
          
          🖥️ **System Health:**
          • CPU Usage: {{ states('sensor.processor_use') }}%
          • Memory Usage: {{ states('sensor.memory_use_percent') }}%
          • Disk Usage: {{ states('sensor.disk_use_percent_config') }}%
          
          Generated: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

# Emergency test script
telegram_emergency_test:
  alias: "Test Emergency Notifications"
  description: "Test emergency notification system"
  sequence:
    - service: notify.telegram
      data:
        title: "🧪 Emergency System Test"
        message: >
          **EMERGENCY NOTIFICATION TEST**
          
          This is a test of the emergency notification system.
          
          🔋 Battery Status: {{ states('sensor.battery_status_summary') | title }}
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          
          Test completed: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

# Git commit script
git_commit_config:
  alias: "Commit Configuration to Git"
  description: "Commit current configuration to GitHub repository"
  sequence:
    - service: shell_command.git_commit
    - service: notify.telegram
      data:
        title: "📝 Configuration Committed"
        message: >
          Home Assistant configuration committed to GitHub.
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

# Entity diagnostics script  
run_entity_diagnostics:
  alias: "Run Entity Diagnostics"
  description: "Check all entities and report missing ones"
  sequence:
    - service: notify.telegram
      data:
        title: "🔍 Entity Diagnostics Complete"
        message: >
          **Entity Diagnostic Results:**
          
          🔋 Battery Entities: {{ states('sensor.battery_entities_status') }}/4 available
          ⚡ Solar Entities: {{ 12 - (states('sensor.missing_solar_entities_report') | int) }}/12 available
          🎛️ Helper Entities: {{ states('sensor.helper_entities_status') }}/8 available
          
          **Overall Status:** {{ 'All entities available ✅' if is_state('binary_sensor.all_critical_entities_available', 'on') else 'Issues detected ⚠️' }}
          
          Scan completed: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
</File Content>
</Opened Files>
<Opened Files>
<File Name>
custom_components/battery_automations_20250822_143748.yaml
</File Name>
<File Content>
# Additional battery automations for specific devices
automation:
  - id: battery_alert_sensor_sm_g996b_battery_level
    alias: "Battery Alert: SM-G996B Battery level"
    description: "Alert when SM-G996B Battery level battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sm_g996b_battery_level
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: SM-G996B Battery level"
          message: >
            SM-G996B Battery level battery is at {{ states('sensor.sm_g996b_battery_level') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 SM-G996B Battery level Battery Low"
          message: "Battery level: {{ states('sensor.sm_g996b_battery_level') }}%"

  - id: battery_alert_sensor_sm_g996b_battery_temperature
    alias: "Battery Alert: SM-G996B Battery temperature"
    description: "Alert when SM-G996B Battery temperature battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sm_g996b_battery_temperature
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: SM-G996B Battery temperature"
          message: >
            SM-G996B Battery temperature battery is at {{ states('sensor.sm_g996b_battery_temperature') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 SM-G996B Battery temperature Battery Low"
          message: "Battery level: {{ states('sensor.sm_g996b_battery_temperature') }}%"

  - id: battery_alert_sensor_sm_g996b_battery_cycle_count
    alias: "Battery Alert: SM-G996B Battery cycle count"
    description: "Alert when SM-G996B Battery cycle count battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sm_g996b_battery_cycle_count
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: SM-G996B Battery cycle count"
          message: >
            SM-G996B Battery cycle count battery is at {{ states('sensor.sm_g996b_battery_cycle_count') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 SM-G996B Battery cycle count Battery Low"
          message: "Battery level: {{ states('sensor.sm_g996b_battery_cycle_count') }}%"

  - id: battery_alert_sensor_sonoff_a4800e446e_battery
    alias: "Battery Alert: SNZB-05P Battery"
    description: "Alert when SNZB-05P Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_a4800e446e_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: SNZB-05P Battery"
          message: >
            SNZB-05P Battery battery is at {{ states('sensor.sonoff_a4800e446e_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 SNZB-05P Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_a4800e446e_battery') }}%"

  - id: battery_alert_sensor_sonoff_a48005596e_battery
    alias: "Battery Alert: Gang Motion Sensor Battery"
    description: "Alert when Gang Motion Sensor Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_a48005596e_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Gang Motion Sensor Battery"
          message: >
            Gang Motion Sensor Battery battery is at {{ states('sensor.sonoff_a48005596e_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Gang Motion Sensor Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_a48005596e_battery') }}%"

  - id: battery_alert_sensor_sonoff_a48008e4cc_battery
    alias: "Battery Alert: Power Room Temperature/Humidity Sensor Battery"
    description: "Alert when Power Room Temperature/Humidity Sensor Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_a48008e4cc_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Power Room Temperature/Humidity Sensor Battery"
          message: >
            Power Room Temperature/Humidity Sensor Battery battery is at {{ states('sensor.sonoff_a48008e4cc_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Power Room Temperature/Humidity Sensor Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_a48008e4cc_battery') }}%"

  - id: battery_alert_sensor_sonoff_a4800d7025_battery
    alias: "Battery Alert: Back Door Sensor Battery"
    description: "Alert when Back Door Sensor Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_a4800d7025_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Back Door Sensor Battery"
          message: >
            Back Door Sensor Battery battery is at {{ states('sensor.sonoff_a4800d7025_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Back Door Sensor Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_a4800d7025_battery') }}%"

  - id: battery_alert_sensor_sonoff_a480098890_battery
    alias: "Battery Alert: Front Door Sensor Battery"
    description: "Alert when Front Door Sensor Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_a480098890_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Front Door Sensor Battery"
          message: >
            Front Door Sensor Battery battery is at {{ states('sensor.sonoff_a480098890_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Front Door Sensor Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_a480098890_battery') }}%"

  - id: battery_alert_sensor_sonoff_a4800986dd_battery
    alias: "Battery Alert: Bedroom Temperature/Humidity Sensor Battery"
    description: "Alert when Bedroom Temperature/Humidity Sensor Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_a4800986dd_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Bedroom Temperature/Humidity Sensor Battery"
          message: >
            Bedroom Temperature/Humidity Sensor Battery battery is at {{ states('sensor.sonoff_a4800986dd_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Bedroom Temperature/Humidity Sensor Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_a4800986dd_battery') }}%"

  - id: battery_alert_sensor_sonoff_1000fd4860_battery_voltage
    alias: "Battery Alert: Salon Front Door Sensor Battery Voltage"
    description: "Alert when Salon Front Door Sensor Battery Voltage battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_1000fd4860_battery_voltage
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Salon Front Door Sensor Battery Voltage"
          message: >
            Salon Front Door Sensor Battery Voltage battery is at {{ states('sensor.sonoff_1000fd4860_battery_voltage') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Salon Front Door Sensor Battery Voltage Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_1000fd4860_battery_voltage') }}%"

  - id: battery_alert_sensor_sonoff_100150e8d2_battery_voltage
    alias: "Battery Alert: Braai Door Sensor Battery Voltage"
    description: "Alert when Braai Door Sensor Battery Voltage battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_100150e8d2_battery_voltage
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Braai Door Sensor Battery Voltage"
          message: >
            Braai Door Sensor Battery Voltage battery is at {{ states('sensor.sonoff_100150e8d2_battery_voltage') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Braai Door Sensor Battery Voltage Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_100150e8d2_battery_voltage') }}%"

  - id: battery_alert_sensor_sonoff_100150eae4_battery_voltage
    alias: "Battery Alert: Garage Mid Door Sensor Battery Voltage"
    description: "Alert when Garage Mid Door Sensor Battery Voltage battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_100150eae4_battery_voltage
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Garage Mid Door Sensor Battery Voltage"
          message: >
            Garage Mid Door Sensor Battery Voltage battery is at {{ states('sensor.sonoff_100150eae4_battery_voltage') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Garage Mid Door Sensor Battery Voltage Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_100150eae4_battery_voltage') }}%"

  - id: battery_alert_sensor_sonoff_1002357bda_battery
    alias: "Battery Alert: 5 Door Battery"
    description: "Alert when 5 Door Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_1002357bda_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: 5 Door Battery"
          message: >
            5 Door Battery battery is at {{ states('sensor.sonoff_1002357bda_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 5 Door Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_1002357bda_battery') }}%"

  - id: battery_alert_sensor_sonoff_1002357619_battery
    alias: "Battery Alert: Study Window 1 Battery"
    description: "Alert when Study Window 1 Battery battery is low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.sonoff_1002357619_battery
        below: 20
        for:
          minutes: 30
    condition:
      - condition: state
        entity_id: input_boolean.battery_alerts_enabled
        state: 'on'
    action:
      - service: notify.email
        data:
          title: "🔋 Battery Alert: Study Window 1 Battery"
          message: >
            Study Window 1 Battery battery is at {{ states('sensor.sonoff_1002357619_battery') }}%
            
            Please charge or replace the battery soon.
            
            Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      - service: notify.telegram
        data:
          title: "🔋 Study Window 1 Battery Battery Low"
          message: "Battery level: {{ states('sensor.sonoff_1002357619_battery') }}%"

</File Content>
</Opened Files>
