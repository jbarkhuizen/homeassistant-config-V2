#===============================================================================
# Automations Configuration - ONLY Automations (No Scripts)
# File: automations.yaml
# Updated: 2025-08-22
# Note: All scripts must be in scripts.yaml, not here
#===============================================================================

# Prepaid meter recharge automation
- id: '1717429630744'
  alias: 'Prepaid: Meter Recharge at 09:00'
  description: 'Update prepaid meter reading when units are recharged'
  trigger:
    - platform: time
      at: '09:00:00'
    - platform: state
      entity_id: input_number.prepaid_meter_units
  condition:
    - condition: template
      value_template: '{{ states(''input_number.prepaid_meter_units'') | float > 0 }}'
  action:
    - service: input_number.set_value
      metadata: {}
      data:
        value: '{{ ((states(''sensor.deyeinvertermaster_summary_total_grid_import_buy'') |
          float(6))  * 1000.0) }}'
      target:
        entity_id: input_number.prepaid_meter_inverter_total_units
    - service: notify.telegram
      data:
        title: "⚡ Prepaid Meter Recharged"
        message: >
          Units added: {{ states('input_number.prepaid_meter_units') }} kWh
          New reading: {{ states('input_number.prepaid_meter_inverter_total_units') }}
          Units remaining: {{ states('sensor.prepaid_units_left') }} kWh
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# Solar inverter optimization automation
- id: '1686299812078'
  alias: 'Solar: Switch Export Mode at 09:00 and Sunset/Sunrise'
  description: 'Control export to non-essentials based on solar availability'
  trigger:
    - platform: time
      at: '09:00:00'
      id: morning_check
    - platform: sun
      event: sunset
      offset: -00:45:00
      id: poweressentials
    - platform: sun
      event: sunrise
      offset: 00:45:00
      id: powernonessentials
  condition:
    - condition: state
      entity_id: input_boolean.solar_optimization_enabled
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: poweressentials
          sequence:
            - service: select.select_option
              data:
                option: Essentials
              target:
                entity_id: 
                  - select.deyeinvertermaster_load_limit_exp_ess_non_ess
                  - select.deyeinverterslave_load_limit_exp_ess_non_ess
            - service: notify.telegram
              data:
                title: "🌅 Solar Mode: Essentials Only"
                message: >
                  Switched to Essentials mode at sunset
                  Battery SOC: {{ states('sensor.combined_battery_soc') }}%
                  Solar Power: {{ states('sensor.combined_solar_power') }}W
        - conditions:
            - condition: trigger
              id: powernonessentials
          sequence:
            - service: select.select_option
              data:
                option: Zero Export
              target:
                entity_id:
                  - select.deyeinvertermaster_load_limit_exp_ess_non_ess
                  - select.deyeinverterslave_load_limit_exp_ess_non_ess
            - service: notify.telegram
              data:
                title: "☀️ Solar Mode: Zero Export"
                message: >
                  Switched to Zero Export mode at sunrise
                  Battery SOC: {{ states('sensor.combined_battery_soc') }}%
                  Solar Power: {{ states('sensor.combined_solar_power') }}W
        - conditions:
            - condition: trigger
              id: morning_check
          sequence:
            - service: script.morning_solar_optimization
  mode: single

# Battery monitoring automation
- id: 'battery_monitoring_daily'
  alias: 'Battery: Daily Monitoring Check at 09:00'
  description: 'Daily battery status check and alerts'
  trigger:
    - platform: time
      at: '09:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.battery_alerts_enabled
      state: 'on'
  action:
    - service: script.battery_status_check
    - condition: template
      value_template: >
        {{ states('sensor.battery_status_summary') in ['critical', 'low'] }}
    - service: notify.telegram
      data:
        title: "🔋 Daily Battery Status Alert"
        message: >
          Battery Status: {{ states('sensor.battery_status_summary') | title }}
          
          {% for entity in ['sensor.temperature_humidity_sensor_battery', 'sensor.temperature_humidity_sensor_battery_2', 'sensor.motion_sensor_battery', 'sensor.snzb_05p_battery'] %}
          {% if states(entity) not in ['unknown', 'unavailable'] %}
          • {{ state_attr(entity, 'friendly_name') }}: {{ states(entity) }}%
          {% endif %}
          {% endfor %}
          
          Monitored devices: {{ states('sensor.battery_devices_count') }}
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# System health monitoring automation
- id: 'system_health_daily'
  alias: 'System: Daily Health Check at 09:00'
  description: 'Daily system health monitoring and reporting'
  trigger:
    - platform: time
      at: '09:00:00'
  action:
    - service: script.system_health_check
    - service: notify.telegram
      data:
        title: "🖥️ Daily System Health Report"
        message: >
          **System Health Summary:**
          
          🖥️ CPU Usage: {{ states('sensor.processor_use') }}%
          💾 Memory Usage: {{ states('sensor.memory_use_percent') }}%
          💿 Disk Usage: {{ states('sensor.disk_use_percent_config') }}%
          ⏰ Uptime: {{ relative_time(states('sensor.last_boot')) }}
          
          **Solar System:**
          🔋 Combined Battery: {{ states('sensor.combined_battery_soc') }}%
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          🏠 Grid Import: {{ states('sensor.total_grid_import') }}W
          📤 Grid Export: {{ states('sensor.total_grid_export') }}W
          
          **Entity Status:**
          ✅ Critical Entities: {{ 'OK' if is_state('binary_sensor.all_critical_entities_available', 'on') else 'ISSUES' }}
          🔋 Battery Sensors: {{ states('sensor.battery_entities_status') }}/4
          
          {% if not is_state('binary_sensor.all_critical_entities_available', 'on') %}
          ⚠️ **Action Required:** Some entities are unavailable.
          {% endif %}
  mode: single

# Energy analytics automation
- id: 'energy_analytics_daily'
  alias: 'Energy: Daily Analytics Report at 09:00'
  description: 'Generate daily energy analytics and savings report'
  trigger:
    - platform: time
      at: '09:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.telegram_energy_reports
      state: 'on'
  action:
    - service: notify.telegram
      data:
        title: "📊 Daily Energy Analytics"
        message: >
          **Yesterday's Energy Performance:**
          
          ☀️ Solar Generated: {{ states('sensor.daily_solar_generation_combined') }} kWh
          🏠 Grid Import: {{ states('sensor.daily_grid_import_total') | float(0) | round(2) }} kWh
          📤 Grid Export: {{ states('sensor.daily_grid_export_total') | float(0) | round(2) }} kWh
          🌱 Independence: {{ states('sensor.energy_independence_percentage') }}%
          
          **Current Status:**
          🔋 Battery SOC: {{ states('sensor.combined_battery_soc') }}%
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          💡 Prepaid Left: {{ states('sensor.prepaid_units_left') }} kWh
          📅 Days Left: {{ states('sensor.days_until_prepaid_empty') }}
          
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# Load shedding preparation automation
- id: 'load_shedding_preparation'
  alias: 'Load Shedding: Daily Preparation Check at 09:00'
  description: 'Check battery levels and prepare for potential load shedding'
  trigger:
    - platform: time
      at: '09:00:00'
    - platform: state
      entity_id: input_boolean.load_shedding_mode
      to: 'on'
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: input_boolean.load_shedding_mode
          state: 'on'
        - condition: numeric_state
          entity_id: sensor.combined_battery_soc
          below: 30
  action:
    - service: notify.telegram
      data:
        title: "🔌 Load Shedding Preparation"
        message: >
          **Load Shedding Status Check:**
          
          🔋 Battery Level: {{ states('sensor.combined_battery_soc') }}%
          ⚡ Solar Power: {{ states('sensor.combined_solar_power') }}W
          🌞 Current Time: {{ now().strftime('%H:%M') }}
          
          {% if states('sensor.combined_battery_soc') | float < 30 %}
          ⚠️ **Battery Low Warning:**
          Battery below 30% - Consider reducing non-essential loads
          {% elif states('sensor.combined_battery_soc') | float >= 80 %}
          ✅ **Battery Well Charged:**
          Ready for potential load shedding periods
          {% else %}
          📊 **Battery Moderate:**
          Monitor levels throughout the day
          {% endif %}
          
          Load Shedding Mode: {{ 'ACTIVE' if is_state('input_boolean.load_shedding_mode', 'on') else 'STANDBY' }}
  mode: single