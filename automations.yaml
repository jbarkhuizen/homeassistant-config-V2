#===============================================================================
# Automations Configuration - SYNTAX FIXED
# File: automations.yaml
# Updated: 2025-08-23 09:00
# Fixed: YAML syntax errors and incomplete automation definitions
#===============================================================================

# Prepaid meter recharge automation (FIXED)
- id: '1717429630744'
  alias: 'Prepaid: Meter Recharge at 09:00'
  description: 'Update prepaid meter reading when units are recharged'
  trigger:
    - platform: time
      at: '09:00:00'
    - platform: state
      entity_id: input_number.prepaid_meter_units
  condition:
    - condition: template
      value_template: '{{ states("input_number.prepaid_meter_units") | float(0) > 0 }}'
  action:
    - service: input_number.set_value
      data:
        value: '{{ ((states("sensor.deyeinvertermaster_summary_total_grid_import_buy") | float(0)) * 1000.0) }}'
      target:
        entity_id: input_number.prepaid_meter_inverter_total_units
    - service: notify.telegram
      data:
        title: "⚡ Prepaid Meter Recharged"
        message: >
          Units added: {{ states('input_number.prepaid_meter_units') }} kWh
          New reading: {{ states('input_number.prepaid_meter_inverter_total_units') }}
          Units remaining: {{ states('sensor.prepaid_units_left') }} kWh
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# Solar inverter optimization automation (COMPLETED)
- id: '1686299812078'
  alias: 'Solar: Switch Export Mode at 09:00 and Sunset/Sunrise'
  description: 'Control export mode based on solar conditions'
  trigger:
    - platform: time
      at: '09:00:00'
    - platform: sun
      event: sunrise
      offset: '+00:30:00'
    - platform: sun
      event: sunset
      offset: '-00:30:00'
  condition:
    - condition: template
      value_template: '{{ states("switch.grid_export_mode") not in ["unavailable", "unknown"] }}'
  action:
    - choose:
        # Enable export during daylight hours
        - conditions:
            - condition: sun
              after: sunrise
              before: sunset
          sequence:
            - service: switch.turn_on
              target:
                entity_id: switch.grid_export_mode
            - service: notify.telegram
              data:
                title: "☀️ Solar Export Enabled"
                message: >
                  Export mode activated for solar generation.
                  Time: {{ now().strftime('%H:%M') }}
                  Trigger: {{ trigger.platform }}
      
        # Disable export after sunset  
        - conditions:
            - condition: sun
              after: sunset
          sequence:
            - service: switch.turn_off
              target:
                entity_id: switch.grid_export_mode
            - service: notify.telegram
              data:
                title: "🌙 Solar Export Disabled"
                message: >
                  Export mode deactivated after sunset.
                  Time: {{ now().strftime('%H:%M') }}
      
      # Default action - status report
      default:
        - service: notify.telegram
          data:
            title: "🔄 Solar Export Status"
            message: >
              Current export mode: {{ states('switch.grid_export_mode') }}
              Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
  mode: single

# Daily system health check (NEW)
- id: 'daily_system_health'
  alias: 'System: Daily Health Check at 09:00'
  description: 'Daily system health monitoring and reporting'
  trigger:
    - platform: time
      at: '09:00:00'
  action:
    - service: notify.telegram
      data:
        title: "🏠 Daily System Health Report"
        message: >
          **System Status - {{ now().strftime('%Y-%m-%d %H:%M') }}**
          
          📊 **Automation Health:**
          • Total automations: {{ states.automation | list | length }}
          • Active automations: {{ states.automation | selectattr('state', 'eq', 'on') | list | length }}
          
          ⚡ **Power System Status:**
          {% if states('sensor.deyeinvertermaster_summary_total_grid_import_buy') not in ['unavailable', 'unknown'] %}
          • Grid import sensor: ✅ Active ({{ states('sensor.deyeinvertermaster_summary_total_grid_import_buy') }})
          {% else %}
          • Grid import sensor: ❌ Unavailable
          {% endif %}
          
          {% if states('input_number.prepaid_meter_units') not in ['unavailable', 'unknown'] %}
          • Prepaid meter: ✅ Active ({{ states('input_number.prepaid_meter_units') }} units)
          {% else %}
          • Prepaid meter: ❌ Unavailable
          {% endif %}
          
          {% if states('switch.grid_export_mode') not in ['unavailable', 'unknown'] %}
          • Export mode: ✅ Active ({{ states('switch.grid_export_mode') }})
          {% else %}
          • Export mode: ❌ Unavailable
          {% endif %}
          
          🌡️ **Weather:** {{ states('weather.forecast_home') | default('Unknown') }}
          
          **Next report:** Tomorrow at 09:00
  mode: single

# Basic connectivity test (NEW)
- id: 'connectivity_test'
  alias: 'System: Basic Connectivity Test at 09:00'
  description: 'Test basic system connectivity and entity availability'
  trigger:
    - platform: time
      at: '09:00:00'
  action:
    - service: notify.telegram
      data:
        title: "🔗 System Connectivity Test"
        message: >
          **Connectivity Test Results - {{ now().strftime('%H:%M') }}**
          
          **Core Entities:**
          {% set test_entities = [
            'input_number.prepaid_meter_units',
            'sensor.deyeinvertermaster_summary_total_grid_import_buy',
            'switch.grid_export_mode'
          ] %}
          {% for entity in test_entities %}
          {% if states(entity) not in ['unavailable', 'unknown'] %}
          • {{ entity }}: ✅ ({{ states(entity) }})
          {% else %}
          • {{ entity }}: ❌ UNAVAILABLE
          {% endif %}
          {% endfor %}
          
          **Integration Status:**
          • Home Assistant: ✅ Online
          • Telegram Bot: ✅ Connected (you're reading this!)
          • Configuration: ✅ Valid (automations running)
          
          **System Info:**
          • Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
          • Uptime: {{ states('sensor.uptime') | default('Unknown') }}
  mode: single

# Emergency system status (NEW)
- id: 'emergency_system_check'
  alias: 'System: Emergency Status Check'
  description: 'Emergency check when critical entities become unavailable'
  trigger:
    - platform: state
      entity_id: 
        - sensor.deyeinvertermaster_summary_total_grid_import_buy
        - input_number.prepaid_meter_units
        - switch.grid_export_mode
      to: 'unavailable'
      for: '00:05:00'
  action:
    - service: notify.telegram
      data:
        title: "⚠️ Critical Entity Unavailable"
        message: >
          **ALERT: Critical entity has become unavailable**
          
          **Failed Entity:** {{ trigger.entity_id }}
          **Previous State:** {{ trigger.from_state.state if trigger.from_state else 'Unknown' }}
          **Duration:** 5+ minutes
          
          **Recommended Actions:**
          1. Check device connectivity
          2. Review integration status  
          3. Restart Home Assistant if needed
          4. Check network connectivity
          
          **Quick Checks:**
          • Go to Settings > Devices & Services
          • Look for integration errors
          • Check device power/network status
          
          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
    - service: persistent_notification.create
      data:
        title: "Critical Entity Alert"
        message: >
          {{ trigger.entity_id }} became unavailable.
          Check integration status immediately.
        notification_id: "critical_entity_{{ trigger.entity_id | replace('.', '_') }}"
  mode: parallel
  max: 5